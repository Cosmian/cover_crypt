---
image: gitlab.cosmian.com:5000/core/ci-rust:latest

variables:
  CARGO_HOME: ${CI_PROJECT_DIR}/.cargo/
  SCCACHE_DIR: ${CI_PROJECT_DIR}/.cache/sccache
  COSMIAN_SERVER_URL: http://localhost:9998
  KMS_PUBLIC_PATH: /tmp
  KMS_PRIVATE_PATH: /tmp
  KMS_SHARED_PATH: /tmp

services:
  - name: gitlab.cosmian.com:5000/core/kms:${KMS_VERSION}_ci
    alias: kms_ci
  - redis:latest

stages:
  - prebuild
  - build
  - test
  - pack
  - publish

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push"

static_analysis:
  stage: prebuild
  only: [main, develop, merge_requests, tags]
  cache: {}
  script:
    - cargo format
    - cargo doc --all-features
    # no feature activated
    - cargo clippy --all-targets -- -D warnings
    # all features activated
    - cargo clippy-all
    # Check semver
    - cargo semver-checks check-release

# Security check
security_check:
  stage: prebuild
  only: [main, develop, merge_requests, tags]
  cache: {}
  script:
    # Check is crate is publishable
    - rm -rf /tmp/${CI_PROJECT_NAME}
    - cp -rf . /tmp/${CI_PROJECT_NAME}
    - cd /tmp/${CI_PROJECT_NAME}
    - cargo publish --dry-run
    - rm -rf /tmp/${CI_PROJECT_NAME}
    # Check deprecated dependencies
    - cargo outdated -wR
    - cargo audit --deny warnings
  allow_failure: true

#
# Build base
#
.base_compile: &base_compile
  stage: build
  only: [main, develop, merge_requests, tags]
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - sccache -s

build_x86_64_centos7:
  <<: *base_compile
  image: gitlab.cosmian.com:5000/core/ci-rust-glibc-2.17
  script:
    - cargo build --release --features ffi --target x86_64-unknown-linux-gnu
    - cbindgen . -c cbindgen.toml | grep -v \#include | uniq >target/${CI_PROJECT_NAME}.h
    - cargo test --release --all-features --target x86_64-unknown-linux-gnu
  artifacts:
    paths:
      - target/x86_64-unknown-linux-gnu/release/*.so
      - target/*.h
    expire_in: 3 mos

test_cloudproof_java:
  image: openjdk:8
  stage: test
  only: [main, develop, merge_requests, tags]
  before_script:
    - apt update && apt install -y maven
  script:
    - git clone --branch main https://github.com/Cosmian/cloudproof_java.git
    - cp target/x86_64-unknown-linux-gnu/release/libcosmian_${CI_PROJECT_NAME}.so cloudproof_java/src/main/resources/linux-x86-64/
    - cd cloudproof_java
    - mvn package
  allow_failure: true

build_wasm:
  <<: *base_compile
  image: gitlab.cosmian.com:5000/core/ci-npm:latest
  script:
    - wasm-pack build -d pkg/web --target web --release --features wasm_bindgen
    - wasm-pack test --node --features wasm_bindgen --lib
  artifacts:
    paths:
      - pkg
    expire_in: 3 mos

test_cloudproof_js:
  image: node:18
  stage: test
  only: [main, develop, merge_requests, tags]
  script:
    - git clone --branch main https://github.com/Cosmian/cloudproof_js.git
    - mkdir -p cloudproof_js/src/pkg/${CI_PROJECT_NAME}
    - cd cloudproof_js
    - ./download_wasm.sh
    # Replace pkg with fresh build
    - cp -r ../pkg/web/* cloudproof_js/src/pkg/${CI_PROJECT_NAME}/
    - npm install
    - npm test
  allow_failure: true

build_windows:
  <<: *base_compile
  script:
    - cargo build --release --features ffi --target x86_64-pc-windows-gnu
    - cbindgen . -c cbindgen.toml | grep -v \#include | uniq >target/${CI_PROJECT_NAME}.h
    # python build
    - pip install -r python/requirements.txt
    - maturin build --release --features python --target x86_64-pc-windows-gnu --target-dir target_python
  artifacts:
    paths:
      - target/x86_64-pc-windows-gnu/release/*.dll
      - target/*.h
      - target/wheels/*win*.whl
    expire_in: 3 mos

build_osx:
  stage: build
  only: [main, develop, merge_requests, tags]
  tags:
    - mac
  before_script:
    - rustup target add aarch64-apple-ios x86_64-apple-darwin x86_64-apple-ios
  script:
    - cargo build --release --features ffi --target x86_64-apple-darwin
    - cargo lipo --release --features ffi
    # python build
    - pip3 install -r python/requirements.txt
    # custom `target_dir` to avoid overwriting flutter `dylib`
    # the wheel python package is still saved in `./target`
    - maturin build --release --features python --target x86_64-apple-darwin --target-dir target_python
  artifacts:
    paths:
      - target/x86_64-apple-darwin/release/*.dylib
      - target/universal/release/*.a
      - target/wheels/*macosx*.whl
    expire_in: 3 mos

test_cloudproof_flutter:
  tags:
    - mac
  stage: test
  only: [main, develop, merge_requests, tags]
  script:
    - git clone --branch main https://github.com/Cosmian/cloudproof_flutter.git
    - cp target/x86_64-apple-darwin/release/libcosmian_${CI_PROJECT_NAME}.dylib cloudproof_flutter/resources/
    - cd cloudproof_flutter
    - flutter pub get
    - flutter test
  allow_failure: true

build_android:
  <<: *base_compile
  image: gitlab.cosmian.com:5000/core/ci-rust-android:latest
  script:
    - cargo ndk -t x86 -t x86_64 -t armeabi-v7a -t arm64-v8a -o jniLibs build --release --features ffi --lib
  artifacts:
    paths:
      - jniLibs
    expire_in: 3 mos

build_python_manylinux:
  stage: build
  only: [main, develop, merge_requests, tags]
  image:
    name: ghcr.io/pyo3/maturin:v0.14.1
    # remove the image custom entrypoint because it is not supported by gitlab runners
    entrypoint: ['']
  script:
    # Build for glibc 2.17
    - maturin build --compatibility manylinux_2_17 --release --features python --target-dir target_python
  artifacts:
    paths:
      - target/wheels/*manylinux*.whl
    expire_in: 3 mos

test_python:
  stage: test
  only: [main, develop, merge_requests, tags]
  script:
    - pip install target/wheels/*manylinux*.whl
    - pip install -r python/requirements.txt
    - mypy python/scripts/test_findex.py
    - python3 python/scripts/test_findex.py

#
# benches
#
benchmarks:
  stage: build
  before_script:
    - apt update && apt install -y gnuplot
  script:
    - cargo bench --features full_bench,hybrid
  when: manual

#
# Pack and publish from here
#
pack_all_artifacts:
  stage: pack
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/
  before_script:
    - apt update && apt install -y zip
  script:
    - zip -r ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-bin.zip pkg target jniLibs
  artifacts:
    name: cosmian_${CI_PROJECT_NAME}_${CI_COMMIT_TAG}
    paths:
      - ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-bin.zip
    expire_in: 3 mos

npm_publish:
  image: gitlab.cosmian.com:5000/core/ci-npm:latest
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/
  script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_ACCESS_TOKEN" > ~/.npmrc
    - wasm-pack build --target web --release --features wasm_bindgen
    - wasm-pack pack
    - wasm-pack publish

cargo_publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/
  script:
    - echo "[registry]" > ~/.cargo/credentials
    - echo "token = \"$CRATES_IO\"" >> ~/.cargo/credentials
    - rm -rf /tmp/${CI_PROJECT_NAME}
    - cp -rf . /tmp/${CI_PROJECT_NAME}
    - cd /tmp/${CI_PROJECT_NAME}
    - rm -rf ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-bin.zip cosmian_${CI_PROJECT_NAME}_${CI_COMMIT_TAG}.zip jniLibs target
    - cargo publish --token $CRATES_IO
    - rm -rf /tmp/${CI_PROJECT_NAME}

python_publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/
  script:
    - pip install twine
    - twine upload -u "${PYPI_USERNAME}" -p "${PYPI_PASSWORD}" target/wheels/${CI_PROJECT_NAME}-${CI_COMMIT_TAG:1}*.whl
