#![allow(non_snake_case)]

use std::{
    collections::{HashMap, HashSet, LinkedList},
    hash::Hash,
};

use cosmian_crypto_core::{reexport::rand_core::CryptoRngCore, SymmetricKey};

use crate::{
    abe_policy::{AccessStructure, Right},
    data_struct::{RevisionMap, RevisionVec},
    traits::{Kem, Nike},
    Error,
};

mod kem;
mod nike;
mod serialization;

#[cfg(test)]
mod tests;

pub mod primitives;

use self::{kem::DecapsulationKey512, kem::MlKem512, nike::R25519};
use nike::{EcPoint, Scalar};

/// The length of the secret encapsulated by Covercrypt.
pub const SHARED_SECRET_LENGTH: usize = 32;

/// The length of the key used to sign user secret keys.
///
/// It is only 16-byte long because no post-quantum security is needed for
/// now. An upgraded signature scheme can still be added later when quantum
/// computers become available.
const SIGNING_KEY_LENGTH: usize = 16;

/// The length of the KMAC signature.
const SIGNATURE_LENGTH: usize = 32;

/// KMAC signature is used to guarantee the integrity of the user secret keys.
type KmacSignature = [u8; SIGNATURE_LENGTH];

/// Length of the Covercrypt early abort tag. 128 bits are enough since we only want collision
/// resistance.
const TAG_LENGTH: usize = 16;

/// Covercrypt early abort tag is used during the decapsulation to verify the
/// integrity of the result.
type Tag = [u8; TAG_LENGTH];

/// Number of colluding users needed to escape tracing.
pub const MIN_TRACING_LEVEL: usize = 1;

/// The Covercrypt subkeys hold the DH secret key associated to a right.
/// Subkeys can be hybridized, in which case they also hold a PQ-KEM secret key.
#[derive(Clone, Debug, PartialEq)]
enum RightSecretKey {
    Hybridized { sk: Scalar, dk: DecapsulationKey512 },
    Classic { sk: Scalar },
}

impl RightSecretKey {
    /// Generates a new random right secret key cryptographically bound to the Covercrypt binding
    /// point `h`.
    fn random(rng: &mut impl CryptoRngCore, hybridize: bool) -> Result<Self, Error> {
        let sk = Scalar::new(rng);
        if hybridize {
            let (dk, _) = MlKem512::keygen(rng)?;
            Ok(Self::Hybridized { sk, dk })
        } else {
            Ok(Self::Classic { sk })
        }
    }

    /// Generates the associated right public key.
    #[must_use]
    fn cpk(&self, h: &EcPoint) -> RightPublicKey {
        match self {
            Self::Hybridized { sk, dk } => RightPublicKey::Hybridized {
                H: h * sk,
                ek: dk.ek(),
            },
            Self::Classic { sk } => RightPublicKey::Classic { H: h * sk },
        }
    }

    /// Returns true if this right secret key is hybridized.
    fn is_hybridized(&self) -> bool {
        match self {
            Self::Hybridized { .. } => true,
            Self::Classic { .. } => false,
        }
    }

    fn drop_hybridization(&self) -> Self {
        match self {
            Self::Hybridized { sk: x_i, .. } => Self::Classic { sk: x_i.clone() },
            Self::Classic { .. } => self.clone(),
        }
    }
}

/// The Covercrypt public keys hold the DH secret public key associated to a right.
/// Subkeys can be hybridized, in which case they also hold a PQ-KEM public key.
#[derive(Clone, Debug, PartialEq)]
enum RightPublicKey {
    Hybridized {
        H: EcPoint,
        ek: kem::EncapsulationKey512,
    },
    Classic {
        H: EcPoint,
    },
}

impl RightPublicKey {
    pub fn is_hybridized(&self) -> bool {
        match self {
            Self::Hybridized { .. } => true,
            Self::Classic { .. } => false,
        }
    }

    pub fn assert_homogeneity(subkeys: &[&Self]) -> Result<(), Error> {
        let is_homogeneous = subkeys
            .iter()
            .all(|cpk| cpk.is_hybridized() == subkeys[0].is_hybridized());

        if is_homogeneous {
            Ok(())
        } else {
            Err(Error::OperationNotPermitted(
                "classic and hybridized access policies cannot be mixed".to_string(),
            ))
        }
    }
}

/// Covercrypt user IDs are used to make user keys unique and traceable.
///
/// They are composed of a sequence of `LENGTH` scalars.
#[derive(Clone, Debug, PartialEq, Eq, Hash, Default)]
struct UserId(LinkedList<Scalar>);

impl UserId {
    /// Returns the tracing level of the USK.
    fn tracing_level(&self) -> usize {
        self.0.len() - 1
    }

    fn iter(&self) -> impl Iterator<Item = &Scalar> {
        self.0.iter()
    }
}

/// Covercrypt tracing secret key.
///
/// It allows creating tracing encapsulations. Such encapsulations can only be
/// opened by a specific USK or combination of USKs (which IDs are known). The
/// number of tracers in the key defines the tracing level. Any key generated by
/// a number of users strictly lower than this level can be traced.
///
/// For example, if the tracing level is two, any collusion of up to two users
/// can be traced.
///
/// It is composed of:
/// - a generator
/// - the tracers;
/// - the set of known user IDs.
#[derive(Debug, PartialEq, Eq)]
struct TracingSecretKey {
    s: Scalar,
    tracers: LinkedList<Scalar>,
    users: HashSet<UserId>,
}

impl TracingSecretKey {
    fn new_with_level(level: usize, rng: &mut impl CryptoRngCore) -> Result<Self, Error> {
        let s = nike::Scalar::new(rng);
        let tracers = (0..=level)
            .map(|_| R25519::keygen(rng).map(|kp| kp.0))
            .collect::<Result<_, _>>()?;
        let users = HashSet::new();

        Ok(Self { s, tracers, users })
    }

    /// Returns the current tracing level.
    fn tracing_level(&self) -> usize {
        self.tracers.len() - 1
    }

    /// Generates a new tracer. Returns the associated trap.
    fn _increase_tracing(&mut self, rng: &mut impl CryptoRngCore) -> Result<(), Error> {
        self.tracers.push_back(R25519::keygen(rng)?.0);
        Ok(())
    }

    /// Drops the oldest tracer and returns it.
    fn _decrease_tracing(&mut self) -> Result<Scalar, Error> {
        if self.tracing_level() == MIN_TRACING_LEVEL {
            Err(Error::OperationNotPermitted(format!(
                "tracing level cannot be lower than {MIN_TRACING_LEVEL}"
            )))
        } else {
            Ok(self
                .tracers
                .pop_front()
                .expect("previous check ensures the queue is never empty"))
        }
    }

    /// Set the level of the tracing secret key to the target level.
    pub fn _set_tracing_level(
        &mut self,
        rng: &mut impl CryptoRngCore,
        target_level: usize,
    ) -> Result<(), Error> {
        if target_level < self.tracing_level() {
            for _ in target_level..self.tracing_level() {
                self._decrease_tracing()?;
            }
        } else {
            for _ in self.tracing_level()..target_level {
                self._increase_tracing(rng)?;
            }
        }
        Ok(())
    }

    /// Returns true if the given user ID is known.
    fn is_known(&self, id: &UserId) -> bool {
        self.users.contains(id)
    }

    /// Adds the given user ID to the list of known users.
    fn add_user(&mut self, id: UserId) {
        self.users.insert(id);
    }

    /// Removes the given user ID from the list of known users.
    ///
    /// Returns true if the user was in the list.
    fn del_user(&mut self, id: &UserId) -> bool {
        self.users.remove(id)
    }

    /// Generates the associated tracing public key.
    #[must_use]
    fn tpk(&self) -> TracingPublicKey {
        TracingPublicKey(self.tracers.iter().map(|s| s.into()).collect())
    }

    /// Returns the binding points.
    fn binding_point(&self) -> EcPoint {
        EcPoint::from(&self.s)
    }

    /// Generates a new ID and adds it to the list of known user IDs.
    fn generate_user_id(&mut self, rng: &mut impl CryptoRngCore) -> Result<UserId, Error> {
        if let Some(last_tracer) = self.tracers.back() {
            // Generate all but the last marker at random.
            let mut markers: LinkedList<Scalar> = self
                .tracers
                .iter()
                .zip(0..self.tracers.len() - 1)
                .map(|_| Scalar::new(rng))
                .collect();

            let last_marker = &(&self.s
                - &self
                    .tracers
                    .iter()
                    .zip(markers.iter())
                    .map(|(sk_i, a_i)| sk_i * a_i)
                    .fold(Scalar::zero(), |acc, x_i| &acc + &x_i))
                / last_tracer;

            markers.push_back(last_marker);
            let id = UserId(markers);
            self.add_user(id.clone());
            Ok(id)
        } else {
            Err(Error::KeyError("MSK has no tracer".to_string()))
        }
    }

    /// Returns true if the given user ID is valid.
    fn _validate_user_id(&self, id: &UserId) -> bool {
        self.s
            == id
                .iter()
                .zip(self.tracers.iter())
                .map(|(identifier, tracer)| identifier * tracer)
                .sum()
    }

    /// If the tracing level of the user ID is not in sync with the one of the
    /// MSK, generate a new ID with the correct tracing level and replace the
    /// old ID by the new one in the MSK.
    ///
    /// # Error
    ///
    /// Returns an error if the ID is unknown.
    fn refresh_id(&mut self, rng: &mut impl CryptoRngCore, id: UserId) -> Result<UserId, Error> {
        if !self.is_known(&id) {
            Err(Error::Tracing("unknown user".to_string()))
        } else if id.tracing_level() != self.tracing_level() {
            let new_id = self.generate_user_id(rng)?;
            self.add_user(new_id.clone());
            self.del_user(&id);
            Ok(new_id)
        } else {
            // Since the integrity of the USK is checked, there is no need to
            // validated the ID before returning it. This saves O(tracing-level)
            // multiplications... but there is actually no way to locally check
            // the caller actually checked the integrity first.
            Ok(id)
        }
    }
}

/// Covercrypt tracing public key.
#[derive(Debug, PartialEq, Eq, Default)]
struct TracingPublicKey(LinkedList<EcPoint>);

impl TracingPublicKey {
    /// Returns the tracing level tracing of this key.
    fn tracing_level(&self) -> usize {
        self.0.len() - 1
    }
}

/// The Covercrypt Master Secret Key (MSK).
///
/// It is composed of:
/// - the scalar `s` used to bind tracing and right secrets;
/// - the tracing secret key used to produce challenges to trace user keys;
/// - the secret associated to the each right in Omega;
/// - an optional key for symmetric USK-signing;
/// - the access structure.
#[derive(Debug, PartialEq)]
pub struct MasterSecretKey {
    tsk: TracingSecretKey,
    secrets: RevisionMap<Right, (bool, RightSecretKey)>,
    signing_key: Option<SymmetricKey<SIGNING_KEY_LENGTH>>,
    pub access_structure: AccessStructure,
}

impl MasterSecretKey {
    /// Returns the most recent secret key associated to each given right.
    ///
    /// # Error
    ///
    /// Returns an error if some right is missing from the MSK.
    fn get_latest_right_sk<'a>(
        &'a self,
        rs: impl Iterator<Item = Right> + 'a,
    ) -> impl Iterator<Item = Result<(Right, RightSecretKey), Error>> + 'a {
        rs.map(|r| {
            self.secrets
                .get_latest(&r)
                .ok_or(Error::KeyError(format!("MSK has no key for right {r:?}")))
                .cloned()
                .map(|(_, key)| (r, key))
        })
    }

    /// Generates a new MPK holding the latest public information of each right in Omega.
    pub fn mpk(&self) -> Result<MasterPublicKey, Error> {
        let h = self.tsk.binding_point();
        Ok(MasterPublicKey {
            tpk: self.tsk.tpk(),
            encryption_keys: self
                .secrets
                .iter()
                .filter_map(|(r, secrets)| {
                    secrets.front().and_then(|(is_activated, csk)| {
                        if *is_activated {
                            Some((r.clone(), csk.cpk(&h)))
                        } else {
                            None
                        }
                    })
                })
                .collect(),
            access_structure: self.access_structure.clone(),
        })
    }
}

/// Covercrypt Public Key (PK).
///
/// It is composed of:
/// - the tracing public key;
/// - the public keys for each right in Omega;
/// - the access structure.
#[derive(Debug, PartialEq)]
pub struct MasterPublicKey {
    tpk: TracingPublicKey,
    encryption_keys: HashMap<Right, RightPublicKey>,
    pub(crate) access_structure: AccessStructure,
}

impl MasterPublicKey {
    /// Returns the tracing level of this MPK.
    #[inline(always)]
    pub fn tracing_level(&self) -> usize {
        self.tpk.tracing_level()
    }

    /// Generates traps for the given scalar.
    // TODO: find a better concept.
    fn set_traps(&self, r: &Scalar) -> Vec<EcPoint> {
        self.tpk.0.iter().map(|gi| gi * r).collect()
    }

    fn select_subkeys(&self, targets: &HashSet<Right>) -> Result<Vec<&RightPublicKey>, Error> {
        let subkeys = targets
            .iter()
            .map(|r| {
                self.encryption_keys
                    .get(r)
                    .ok_or_else(|| Error::KeyError(format!("no public key for right '{r:#?}'")))
            })
            .collect::<Result<Vec<_>, _>>()?;
        RightPublicKey::assert_homogeneity(&subkeys)?;
        Ok(subkeys)
    }
}

/// Covercrypt User Secret Key (USK).
///
/// It is composed of:
/// - a user ID (pair of scalars);
/// - the keys of the rights derived from the user decryption policy;
/// - a signature from the MSK that guarantees its integrity.
#[derive(Clone, Debug, PartialEq)]
pub struct UserSecretKey {
    id: UserId,
    ps: Vec<EcPoint>,
    secrets: RevisionVec<Right, RightSecretKey>,
    signature: Option<KmacSignature>,
}

impl UserSecretKey {
    /// Returns the tracing level of this user secret key.
    pub fn tracing_level(&self) -> usize {
        self.id.tracing_level()
    }

    #[cfg(feature = "test-utils")]
    pub fn count(&self) -> usize {
        self.secrets.len()
    }

    fn set_traps(&self, r: &Scalar) -> Vec<EcPoint> {
        self.ps.iter().map(|gi| gi * r).collect()
    }
}

/// Encapsulation of a `SHARED_SECRET_LENGTH`-byte secret for a given right.
///
/// In case the security level of the associated right was set to post-quantum secure, the key
/// encapsulation is hybridized. This implies a significant size overhead.
#[derive(Debug, Clone, Hash, PartialEq)]
enum Encapsulation {
    Classic {
        F: [u8; SHARED_SECRET_LENGTH],
    },
    Hybridized {
        E: kem::Encapsulation512,
        F: [u8; SHARED_SECRET_LENGTH],
    },
}

/// Covercrypt encapsulation.
///
/// It is created for a subset of rights from Omega.
///
/// It is composed of:
/// - the early abort tag;
/// - the traps used to select users that can open this encapsulation;
/// - the right encapsulations.
#[derive(Debug, Clone, PartialEq)]
pub struct XEnc {
    tag: Tag,
    c: Vec<EcPoint>,
    encapsulations: Vec<Encapsulation>,
}

impl XEnc {
    /// Returns the tracing level of this encapsulation.
    pub fn tracing_level(&self) -> usize {
        self.c.len() - 1
    }

    #[cfg(feature = "test-utils")]
    pub fn count(&self) -> usize {
        self.encapsulations.len()
    }
}
